import java.util.*;

public class StringPractice {
    
    // 1. Reverse a String
    public static String reverseString(String str) {
        return new StringBuilder(str).reverse().toString();
    }

    // 2. Reverse a sentence while preserving position
    public static String reverseWords(String sentence) {
        String[] words = sentence.split(" ");
        StringBuilder result = new StringBuilder();
        for (String word : words) {
            result.append(new StringBuilder(word).reverse()).append(" ");
        }
        return result.toString().trim();
    }

    // 3. Check if the string is an anagram
    public static boolean isAnagram(String str1, String str2) {
        char[] arr1 = str1.replaceAll("\\s", "").toLowerCase().toCharArray();
        char[] arr2 = str2.replaceAll("\\s", "").toLowerCase().toCharArray();
        Arrays.sort(arr1);
        Arrays.sort(arr2);
        return Arrays.equals(arr1, arr2);
    }

    // 4. Check if the string is a pangram
    public static boolean isPangram(String str) {
        str = str.toLowerCase();
        boolean[] alphabet = new boolean[26];
        for (char c : str.toCharArray()) {
            if (c >= 'a' && c <= 'z') {
                alphabet[c - 'a'] = true;
            }
        }
        for (boolean present : alphabet) {
            if (!present) return false;
        }
        return true;
    }

    // 5. Print repeatedly occurring characters
    public static void printRepeatingChars(String str) {
        Map<Character, Integer> charCount = new HashMap<>();
        for (char c : str.toCharArray()) {
            charCount.put(c, charCount.getOrDefault(c, 0) + 1);
        }
        for (Map.Entry<Character, Integer> entry : charCount.entrySet()) {
            if (entry.getValue() > 1) {
                System.out.println(entry.getKey() + " -> " + entry.getValue());
            }
        }
    }

    // 6. Sort a string alphabetically
    public static String sortString(String str) {
        char[] arr = str.toCharArray();
        Arrays.sort(arr);
        return new String(arr);
    }

    // 7. Count vowels and consonants
    public static void countVowelsConsonants(String str) {
        int vowels = 0, consonants = 0;
        str = str.toLowerCase();
        for (char c : str.toCharArray()) {
            if (Character.isLetter(c)) {
                if ("aeiou".indexOf(c) != -1) {
                    vowels++;
                } else {
                    consonants++;
                }
            }
        }
        System.out.println("Vowels: " + vowels + ", Consonants: " + consonants);
    }

    // 8. Count special characters
    public static int countSpecialCharacters(String str) {
        int count = 0;
        for (char c : str.toCharArray()) {
            if (!Character.isLetterOrDigit(c) && !Character.isWhitespace(c)) {
                count++;
            }
        }
        return count;
    }

    public static void main(String[] args) {
        String str = "iNeuron";
        System.out.println("Reversed String: " + reverseString(str));
        
        String sentence = "Think Twice";
        System.out.println("Reversed Words: " + reverseWords(sentence));
        
        System.out.println("Is Anagram: " + isAnagram("listen", "silent"));
        
        System.out.println("Is Pangram: " + isPangram("The quick brown fox jumps over the lazy dog"));
        
        System.out.println("Repeated Characters:");
        printRepeatingChars("programming");
        
        System.out.println("Sorted String: " + sortString("hello"));
        
        countVowelsConsonants("Hello World");
        
        System.out.println("Special Character Count: " + countSpecialCharacters("Hello@World!123"));
    }
}
